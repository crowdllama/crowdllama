name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  GO_VERSION: '1.24.4'
  CGO_ENABLED: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8.0.0
      with:
        version: v2.1.6
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail CI for known dependency vulnerabilities
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
      continue-on-error: true  # Don't fail step for known vulnerabilities

    - name: Comment on known vulnerabilities
      if: failure()
      run: |
        echo "⚠️  Known vulnerability detected:"
        echo "GO-2024-3218 in github.com/libp2p/go-libp2p-kad-dht"
        echo "This is a dependency issue that will be resolved when the maintainers release a fix."
        echo "See: https://pkg.go.dev/vuln/GO-2024-3218"

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build binaries
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        go build -v -o bin/consumer-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/consumer
        go build -v -o bin/worker-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/worker
        go build -v -o bin/dht-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/dht
        go build -v -o bin/crowdllama-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/crowdllama

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: bin/
        retention-days: 7

  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for git commands

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}/consumer
          ghcr.io/${{ github.repository }}/worker
          ghcr.io/${{ github.repository }}/dht
          ghcr.io/${{ github.repository }}/crowdllama
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Get commit hash
      id: commit
      run: echo "hash=${GITHUB_SHA}" >> $GITHUB_OUTPUT

    - name: Get build date
      id: date
      run: echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

    - name: Build and push consumer image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.consumer
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/consumer:latest
          ghcr.io/${{ github.repository }}/consumer:${{ steps.commit.outputs.hash }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.commit.outputs.hash }}
          COMMIT_HASH=${{ steps.commit.outputs.hash }}
          BUILD_DATE=${{ steps.date.outputs.date }}

    - name: Build and push worker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.worker
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/worker:latest
          ghcr.io/${{ github.repository }}/worker:${{ steps.commit.outputs.hash }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.commit.outputs.hash }}
          COMMIT_HASH=${{ steps.commit.outputs.hash }}
          BUILD_DATE=${{ steps.date.outputs.date }}

    - name: Build and push dht image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.dht
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/dht:latest
          ghcr.io/${{ github.repository }}/dht:${{ steps.commit.outputs.hash }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.commit.outputs.hash }}
          COMMIT_HASH=${{ steps.commit.outputs.hash }}
          BUILD_DATE=${{ steps.date.outputs.date }}

    - name: Build and push crowdllama image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.crowdllama
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/crowdllama:latest
          ghcr.io/${{ github.repository }}/crowdllama:${{ steps.commit.outputs.hash }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.commit.outputs.hash }}
          COMMIT_HASH=${{ steps.commit.outputs.hash }}
          BUILD_DATE=${{ steps.date.outputs.date }} 